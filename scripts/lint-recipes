#!/usr/bin/env python
# A simple linter for alidist recipes
from __future__ import print_function
import yaml
import sys
from argparse import ArgumentParser
from yaml import DocumentEndEvent, DocumentStartEvent
from yaml import StreamStartEvent
from yaml import MappingStartEvent, MappingEndEvent
from yaml import ScalarEvent
from yaml import SequenceStartEvent, SequenceEndEvent

IN_START_STREAM=0
IN_BEGIN=1
IN_DOCUMENT_STARTED=2
IN_MAPPING_STARTED=3
IN_PACKAGE_KEY=4
IN_VERSION_KEY=5
IN_TAG_KEY=6
IN_REQUIRES_KEY=7
IN_BUILD_REQUIRES_KEY=8
IN_GENERIC_KEY_VALUE=100
IN_GENERIC_LIST=101
IN_DONE=9999
IN_ERROR=10000

def keyState(key):
    return globals().get("IN_" + key.upper() + "_KEY", IN_GENERIC_KEY_VALUE)

def stateKey(state):
    for x in globals():
        if type(globals().get(x)) != int: continue
        if x.startswith("IN_") and globals().get(x) == state:
            return x
    return "<none_%d>" % state

def error(s, event):
    print(s)
    print(event.start_mark)
    print(event)
    sys.exit(1)

def debug(s):
    print("DEBUG: %s" % s)

if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("filename")
    parser.add_argument("-d", "--debug", dest="debug", action="store_true", default=False, help="Show debug messages")
    args = parser.parse_args()
    if not args.debug:
        debug = lambda x: None
    state = IN_START_STREAM
    events = yaml.parse(open(args.filename,"r").read())
    states = []
    numberOfProperties = 0
    hasVersion = False
    hasTag = False
    hasRequires = False
    hasBuildRequires = False
    reprocessState = False
    while state != IN_DONE:
        if reprocessState:
            reprocessState = False
        else:
            event = events.next()
        debug("%s#%d <%s> %s (%s) %d:%s" % ("  "*len(states),
                                            numberOfProperties,
                                            event.value if hasattr(event, "value") else "***",
                                            str(event),
                                            stateKey(state),
                                            len(states),
                                            states))
        if state == IN_START_STREAM:
            if type(event) != StreamStartEvent:
                error("Cannot find start of stream", event)
            event = events.next()
            if type(event) != DocumentStartEvent:
                error("Cannot find start of YAML document", event)
            event = events.next()
            if type(event) != MappingStartEvent:
                error("Recipe should start with a dictionary", event)
            state = IN_GENERIC_KEY_VALUE
        elif state == IN_PACKAGE_KEY:
            if type(event) != ScalarEvent:
                error("package field should be a scalar", event)
            if numberOfProperties != 1:
                error("package field should be the first one", event)
            state = IN_GENERIC_KEY_VALUE
        elif state == IN_VERSION_KEY:
            if type(event) != ScalarEvent:
                error("version should be a scalar", event)
            if numberOfProperties != 2:
                error("version (or tag, if version is missing) should be the second property in the recipe", event)
            hasVersion = True
            state = IN_GENERIC_KEY_VALUE
        elif state == IN_TAG_KEY:
            if type(event) != ScalarEvent:
                error("tag should be a scalar", event)
            if hasVersion == True and numberOfProperties != 3:
                error("tag should always be right after version, if the latter is present", event)
            elif hasVersion == False and numberOfProperties != 2:
                error("tag should come after package, if no version present", event)
            state = IN_GENERIC_KEY_VALUE
        elif state == IN_REQUIRES_KEY:
            if hasBuildRequires:
                error("requires should come before build_requires", event)
            hasRequires = True
            reprocessState = True
            state = IN_GENERIC_KEY_VALUE
        elif state == IN_BUILD_REQUIRES_KEY:
            hasBuildRequires = True
            reprocessState = True
            state = IN_GENERIC_KEY_VALUE
        elif state == IN_GENERIC_KEY_VALUE:
            # In general we do not look for particular properties
            if type(event) == MappingStartEvent:
                states.append(state) # save the current
                state = IN_GENERIC_KEY_VALUE
                continue
            elif type(event) == MappingEndEvent and not states:
                state = IN_DONE
                continue
            elif type(event) == MappingEndEvent:
                state = states.pop() # get the previous state
                continue
            elif type(event) == SequenceStartEvent:
                states.append(state)
                state = IN_GENERIC_LIST
                continue
            # ScalarEvent
            if len(states) == 0:
                numberOfProperties += 1
                state = keyState(event.value)
        elif state == IN_GENERIC_LIST:
            if type(event) == SequenceStartEvent:
                states.append(state)
                state = IN_GENERIC_LIST
                continue
            elif type(event) == SequenceEndEvent:
                state = states.pop()
            elif type(event) == MappingStartEvent:
                states.append(state)
                state = IN_GENERIC_KEY_VALUE
                continue
            elif type(event) != ScalarEvent:
                error("Expecting scalar value")
        elif type(event) == DocumentEndEvent:
            state = IN_DONE
